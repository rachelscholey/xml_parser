checks - chect the sequence only contains ATCG
Tthe sequence data is the genomic sequence
Include the asserts as airbag so 
The level of documentation will be crucial - include annotations to all of the code you write 
what are the generic fucntion we could use to do this? write stuff that pulls out the tags we define.....
Will the LRG file's be laid out in all the same way, e.g. if we are referencing elements/tags as 


extract some meta information to include at the top 

1. import xml.etree.ElementTree as tree

2. assign the parsed tree to a variable such as COL1A_LRG1 and get the root 
we think the root should be lrg with attribute as -schema version and text as 1.9
we could incorporate an assertion at this point to test - is the root lrg? 

print to screen this is lrg_1 (ID tag)
print to screen gene - COL1A1 (name tag)

3.identify the genomic sequence tag and store the data in a list of characters.

see if child tag coordinates[0] (which is a child of the transcript tag)
attribute [2] is the same length of the list of the genomic sequence it is not:
the exons start at 5001, they end at 22544, in the genomic sequence we have starts at 1 and ends 24544 
so we have 2000 extra bases at the end of our sequnce. we are therefore excluding the 5000 bases at the start a$

assertion - check the length of the list is the same as the length of the genomic sequence by
checking that the end of the coordinate tag 0 and attribute 2 plus 2000 is equal the length 

print to screen - "genomic sequence is length" insert length

4. Now we need the exon coordinate 
we could create a dictionary with the exon number as the key, the start as value[0] and the end as value[2]
assertion - check the number of keys in the dictionay is equal to the number of exons.  
e.g.
exon_ dict_ = {}
for every exon attribute text:
	take the values add it to a dictionary as teh key
	then for the same exon take the forst row coordinates attribute "start"'s test and "end" test 
	and add it as values

5. now we need to work out the coordinates of the introns. 

my_intron_diction = []
for every key in the exon_ dictionary:
assign the value to the new intron_dictionary as the key 
take the end value + 1 to create the intron start value
then move to the key + 1 take the start -1 and assign it as the entron end value

there is going to be one less intron than there are exon:
	if else statement to control this. check there is another exon after it

assertion - 

6. now we need to iterate through the intron dictionary, and pull out the coordinate values 
compare to the list of the genomic sequence and pull them out. list starts as 0 and coordinates start a 1 so we need to do 
coordinates - 1 

assertion - 

7. Output
output as a fasta a format document....
>intron 1, start: end: 
sequence

	

    



